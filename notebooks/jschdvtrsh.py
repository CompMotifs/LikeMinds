# -*- coding: utf-8 -*-
"""Like_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yxhkk6BSYDeLEKNCmXGffl2XcmSxKEc8
"""

import requests
import json

def get_did_from_handle(handle):
    """Convert a Bluesky handle to a DID"""
    response = requests.get(
        "https://public.api.bsky.app/xrpc/com.atproto.identity.resolveHandle",
        params={"handle": handle}
    )
    if not response.ok:
        raise Exception(f"Failed to resolve handle: {response.status_code}")
    return response.json()["did"]

def get_service_endpoint(did):
    """Get the PDS service endpoint for a DID"""
    if did.startswith('did:web:'):
        response = requests.get(f"https://{did[8:]}/.well-known/did.json")
    else:
        response = requests.get(f"https://plc.directory/{did}")

    if not response.ok:
        raise Exception(f"Failed to get DID info: {response.status_code}")

    did_info = response.json()
    if not did_info.get("service") or not did_info["service"][0]:
        raise Exception("Could not find service endpoint")

    return did_info["service"][0]["serviceEndpoint"]

def get_likes(profile_id, limit=25, cursor=None):
    """Get likes from a Bluesky profile"""
    # Convert handle to DID if needed
    did = profile_id if profile_id.startswith('did:') else get_did_from_handle(profile_id)

    # Get the PDS endpoint
    endpoint = get_service_endpoint(did)

    # Get likes
    params = {
        "repo": did,
        "collection": "app.bsky.feed.like",
        "limit": limit
    }
    if cursor:
        params["cursor"] = cursor

    response = requests.get(
        f"{endpoint}/xrpc/com.atproto.repo.listRecords",
        params=params
    )
    if not response.ok:
        raise Exception(f"Failed to get likes: {response.status_code}")

    likes_data = response.json()

    # Extract post URIs from likes
    post_uris = []
    for like_record in likes_data.get("records", []):
        subject = like_record.get("value", {}).get("subject", {})
        uri = subject.get("uri", "")
        # Only include app.bsky.feed.post URIs
        if "/app.bsky.feed.post/" in uri:
            post_uris.append({
                "uri": uri,
                "liked_at": like_record.get("value", {}).get("createdAt")
            })

    return {
        "likes": post_uris,
        "cursor": likes_data.get("cursor")
    }

def extract_post_info(uri):
    """Get basic info about a post from its URI"""
    parts = uri.split("/")
    return {
        "repo": parts[2],
        "collection": parts[3],
        "rkey": parts[4],
        "url": f"https://bsky.app/profile/{parts[2]}/post/{parts[4]}"
    }

def get_post_details(post_uris):
    """Get detailed information about posts from their URIs"""
    if not post_uris:
        return []

    response = requests.get(
        "https://public.api.bsky.app/xrpc/app.bsky.feed.getPosts",
        params={"uris": post_uris}
    )
    if not response.ok:
        raise Exception(f"Failed to get posts: {response.status_code}")

    return response.json().get("posts", [])

profile = input("Enter Bluesky handle or DID: ")
try:
    likes_data = get_likes(profile, limit=5)
    print(f"Found {len(likes_data['likes'])} likes")

    # Get post details to extract text
    post_uris = [like["uri"] for like in likes_data["likes"]]
    posts_details = get_post_details(post_uris)

    for like in likes_data["likes"]:
        post_info = extract_post_info(like["uri"])
        print(f"Liked on: {like['liked_at']}")
        print(f"Post URL: {post_info['url']}")
        print(f"URI: {like['uri']}")

        # Find the corresponding post details
        post_detail = next((p for p in posts_details if p["uri"] == like["uri"]), None)
        if post_detail and "record" in post_detail and "text" in post_detail["record"]:
            post_text = post_detail["record"]["text"]
            preview = post_text[:20] + "..." if len(post_text) > 20 else post_text
            print(f"Content preview: {preview}")
        else:
            print("Content preview: [Could not retrieve post text]")

        print("-" * 40)

    if likes_data["cursor"]:
        print("More likes available. Use the cursor for pagination.")
except Exception as e:
    print(f"Error: {e}")
